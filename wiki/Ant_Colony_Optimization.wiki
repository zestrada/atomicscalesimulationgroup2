#summary Ant Colony Optimization


= Introduction =

Ant Colony Optimization (ACO) is an algorithm based on swarm intelligence.  The heuristic is derived from the method that ants use to find their food source. As ants travel, they deposit pheromones. These pheromones can be detected by other ants.  Over time, the pheromones evaporate, so paths that take longest will have a lower pheromone concentration.  Shorter paths will build up a stronger pheromone concentration.  This method lends itself very naturally to the traveling salesman problem, so we use it as one of the algorithms in searching for solutions to for our surface optimization problem.

[http://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Aco_branches.svg/500px-Aco_branches.svg.png]
Source: wikipedia

= The Algorithm =

ACO simulates the behavior of ants finding food by performing random walks over the solution space, biased by pheromone values. These pheromone values are stored in the pheromone matrix, which has an entry for each move. The pheromones are deposited and evaporated throughout the simulation based on certain heuristics (dependent on the method used).

At the beginning of the simulation, a number of ants are defined. At each step, every ant constructs a solution and then these solutions are used to update the pheromone matrix. Eventually, through evaporation and deposition of pheromones, all of the ants will be travelling on the same path, and this is the converged solution.

The pheromone updates are summarized below:

<img src="http://atomicscalesimulationgroup2.googlecode.com/svn/wiki/images/p_update.png" width="200"/>

where r is the evaporation rate, Q is a parameter and L_k is the length of this ant's tour (bond energy in our case).


== Classes of Pheromone Updates ==
=== Ant System ===

=== Best Ant ===
This method is designed to allow for faster convergence to a minimum solution

= Specific to this problem =